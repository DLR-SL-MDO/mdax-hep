{"identifier": "0c31812c-6943-43fd-b2b5-96e88ed27f69", "workflowVersion": "5.0", "name": "Hybrid-Electric Propulsion Design - Parallel Execution", "nodes": [{"identifier": "59fee4a8-1721-4ee8-906e-7556602fafd7", "name": "MDA", "location": "270:270", "zIndex": "1", "active": "true", "component": {"identifier": "de.rcenvironment.converger", "version": "6", "name": "Converger"}, "configuration": {"epsA": "1e-02", "epsR": "1e-02", "failLoopOnly-NAV_5e0ed1cd": "true", "isNestedLoop_5e0ed1cd": "false", "iterationsToConsider": "1", "maxConvChecks": "100", "maxRerunBeforeFail-NAV_5e0ed1cd": "1", "notConvFail": "false", "notConvIgnore": "true", "notConvNotAValue": "false", "storeComponentHistoryData": "true"}, "staticOutputs": [{"identifier": "dc68334d-706b-4139-8408-c5f1f802a967", "name": "Converged", "datatype": "Boolean"}, {"identifier": "bb5e4068-543e-4139-a918-c06f92e8aff2", "name": "Converged absolute", "datatype": "Boolean"}, {"identifier": "4fd187bb-04b9-4408-93b7-55ecbac3ae11", "name": "Converged relative", "datatype": "Boolean"}, {"identifier": "ea2339f8-bf03-4dd3-8e5f-5ecfdc7ce9fa", "name": "Done", "datatype": "Boolean"}], "dynamicInputs": [{"identifier": "a73bc4d3-3b8d-43f8-b1c6-c3e135cb5ce1", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/designMasses/mTOM/mass", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "ff86c296-66fe-4531-9b8d-717bf1d9c744", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/designMasses/mTOM/mass_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "8902a81b-669b-4d75-bca4-b84295a24ff2", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/mOEM/massDescription/mass", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "24f595d0-56f7-45a4-bc85-d65a6bebf3f5", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/mOEM/massDescription/mass_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "1487a2e6-9d4e-4f47-97fb-07099dd4e6ca", "name": "XML", "epIdentifier": "toForward", "group": "valuesToConverge", "datatype": "FileReference"}, {"identifier": "090590f7-5e63-4574-8ee5-53b4c14add3f", "name": "XML_start", "epIdentifier": "startToForward", "group": "startValues", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "85e8cacf-ad9c-4cde-8a13-7ad5cf795a62", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/designMasses/mTOM/mass", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "682f565c-1739-4d2e-9d92-1d803002fb9a", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/designMasses/mTOM/mass_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "21cc5280-5e1d-44f9-abbb-f606bf057f5a", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/designMasses/mTOM/mass_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "4124809d-88ff-4672-bb23-77af63c652ab", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/mOEM/massDescription/mass", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "bbd799cf-5c0e-43dc-9e21-84f512892b42", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/mOEM/massDescription/mass_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "4d9fba90-4102-4b96-828e-bbcfd5ce2e01", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/mOEM/massDescription/mass_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "a37bfa15-65e9-4cd5-a2cd-a819641675e3", "name": "XML", "epIdentifier": "toForward", "datatype": "FileReference"}, {"identifier": "190419f5-9853-49ed-adae-f74992a0a69b", "name": "XML_converged", "epIdentifier": "finalToForward", "datatype": "FileReference"}]}, {"identifier": "b0cd3201-caf3-4d11-95da-f379e09c3cf7", "name": "PerformanceBlock", "location": "490:490", "zIndex": "2", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.PerformanceBlock", "version": "0.2", "name": "PerformanceBlock"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "0fe475dc-0c20-43df-8b78-78aeb10642c9", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "40fd11a4-a0f6-4eca-ac1e-b65aefc3f9dd", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "02f9fda8-5486-41d9-8176-df630b2dcee4", "name": "HybridSystemBlock", "location": "790:770", "zIndex": "3", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.HybridSystemBlock", "version": "0.2", "name": "HybridSystemBlock"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "4e00b911-5def-48f0-830e-99b073936df5", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "e32b9dff-b2fc-4348-bc6f-13801b6e28ff", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "907d1a1a-2721-4637-ba46-0761682bdac8", "name": "EngineBlock", "location": "1090:1050", "zIndex": "4", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.EngineBlock", "version": "0.2", "name": "EngineBlock"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "f3e7a3a2-862d-417a-a780-66d922ef402e", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "c03ee5be-d6da-4d0b-9d13-7b9e81764db1", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "52cc45a3-bcab-43b3-b8be-1cc561d67f03", "name": "MassesBlock", "location": "1390:1330", "zIndex": "5", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.MassesBlock", "version": "0.1", "name": "MassesBlock"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "a15feb95-54ea-4aa9-ba14-8277adddb7dc", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "fa01edcb-625a-4593-b672-011bb5ad6435", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "043bcfda-a0a8-4ad7-b8c9-db33178d8fa5", "name": "MissionBlock", "location": "1690:1610", "zIndex": "6", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.MissionBlock", "version": "0.2", "name": "MissionBlock"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "d75bb3e9-5453-4a00-ab65-dd02ce1032c7", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "dd653793-e613-4e3b-9b1b-572793c46209", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "4d2ec392-a3b7-4d7d-86b3-29331f7c79b6", "name": "MDA_input_values", "location": "290:215", "zIndex": "7", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "8432b7e5-0c23-473d-9811-9307f0931231", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "a8cf7336-0ec3-4eda-871c-6d7f5c45f34e", "name": "XML", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "3c19c0ee-1d90-435b-8c27-410f4df90620", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/designMasses/mTOM/mass", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/designMasses/mTOM/mass"}}, {"identifier": "4f53ba7e-1115-4f1a-9e57-04f0d768769e", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/mOEM/massDescription/mass", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/mOEM/massDescription/mass"}}]}, {"identifier": "eaf99b37-f137-4b95-a183-0e02e1f4e7af", "name": "MDA_loop_input_values", "location": "290:365", "zIndex": "8", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "9e774ede-7187-461c-9561-2c132175ec3a", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "5b753822-9931-4c43-9592-faec66ce16b8", "name": "XML", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "397fdf90-2ecf-415a-b785-fc8c85b82fc0", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/designMasses/mTOM/mass", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/designMasses/mTOM/mass"}}, {"identifier": "f188c79d-bd1c-4df7-a2fb-69ac6fa4064e", "name": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/mOEM/massDescription/mass", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/cpacs/vehicles/aircraft/model[@uID=\"model\"]/analyses/massBreakdown/mOEM/massDescription/mass"}}]}, {"identifier": "fc7455dc-3e7a-49f3-8e63-f5c8cda972d1", "name": "MDA_concurrency_resolution_f6ccF7cd", "location": "270:1425", "zIndex": "9", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "8bba7f0e-bf88-478c-be67-7b24cbbb42c1", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "3c1a4f51-8db1-4d08-b48b-617d19caec95", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "d083340c-e4dc-4fd7-ba8a-0c5058dca3c9", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "10adea1e-2689-40d2-a1c7-94766bd6b2cc", "name": "MDA_concurrency_resolution_f6ccF7cd_merger", "location": "365:1445", "zIndex": "10", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/toolspecific/HybridTool/Outputs/ICEpower |\n\t\t\t/cpacs/toolspecific/HybridTool/Outputs/mHybridSystem |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/designMasses/mTOM/mass |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/massDescription/mass |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/massDescription/mass\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/toolspecific/HybridTool/Outputs/ICEpower |\n\t\t\t/cpacs/toolspecific/HybridTool/Outputs/mHybridSystem |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/designMasses/mTOM/mass |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/massDescription/mass |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/massDescription/mass\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "ef27d6ed-ad6b-4ef7-8a96-547e369d78e7", "name": "XML", "datatype": "FileReference"}, {"identifier": "b1f88c99-77a8-4d99-a579-52b521892126", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "c01daeaa-bd3d-478f-926f-163266148c57", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "3f3b8362-adc5-4101-ab30-372ea8eb8d72", "name": "PerformanceBlock_input_filter", "location": "510:435", "zIndex": "11", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Inputs |\n\t\t\t/cpacs/toolspecific/technologies |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/aeroPerformanceMap |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/designMasses |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/reference\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Inputs |\n\t\t\t/cpacs/toolspecific/technologies |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/aeroPerformanceMap |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/designMasses |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/reference\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "9ffa8a38-95a9-49b0-a855-03c15931fdac", "name": "XML", "datatype": "FileReference"}, {"identifier": "375b69bf-416b-443c-90bf-a1efc9a74369", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "c8eec761-71b6-4faa-ba1c-7bbfb49fb0e1", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "a780ebb5-a430-4ac4-a7e0-fd0fa792d14f", "name": "PerformanceBlock_output_filter", "location": "585:510", "zIndex": "12", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Outputs |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/analysis/thrust00\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Outputs |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/analysis/thrust00\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "fe41f566-62b0-478f-a183-30a0822c4bea", "name": "XML", "datatype": "FileReference"}, {"identifier": "a4169f89-e748-44ad-a7b4-6f5673414752", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "6ab693ad-eebd-4d62-bd9a-a50e36aa2771", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "9d64ddd8-1c1e-4792-b833-422497561574", "name": "PerformanceBlock_splitter", "location": "565:435", "zIndex": "13", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "8f3597b8-b4a0-4b6f-b18c-ccb6846d1028", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "c6a5e620-b0ee-4f76-ae79-214307c9a289", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "163d3136-0478-48b6-be75-6824ef2daac9", "name": "PerformanceBlock_output_complement_filter", "location": "620:435", "zIndex": "14", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific/ASTRID |\n\t\t\t/cpacs/toolspecific/HybridTool |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Inputs |\n\t\t\t/cpacs/toolspecific/technologies |\n\t\t\t/cpacs/vehicles/aircraft |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/analysis/bpr00 |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/geometry\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific/ASTRID |\n\t\t\t/cpacs/toolspecific/HybridTool |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Inputs |\n\t\t\t/cpacs/toolspecific/technologies |\n\t\t\t/cpacs/vehicles/aircraft |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/analysis/bpr00 |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/geometry\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "e653a40f-97d2-4662-b29a-6964590eb330", "name": "XML", "datatype": "FileReference"}, {"identifier": "87e519cc-95fc-4947-b861-d44eaa9dce3a", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "35e8afba-7a89-4935-8562-a657b889454f", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "2bfa2bba-07e8-4d18-98c6-8f829d881fd9", "name": "PerformanceBlock_merge_script", "location": "600:585", "zIndex": "15", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "8f159144-42f6-4d37-8b64-6c7fd9225b75", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "3ff9d686-a99d-4969-997d-b4e8d2542cce", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "7545fe46-e2d4-4522-8d42-71748188bb11", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "4359f9a3-0914-4369-a872-29e893d76b6c", "name": "HybridSystemBlock_input_filter", "location": "810:715", "zIndex": "16", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Inputs/SFCclean[@mapType='vector'] |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Outputs/SFCnew[@mapType='vector'] |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Inputs/MainPhasesDuration[@mapType='vector'] |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Inputs/NumberEngines |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Inputs/AltitudeCruise |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Outputs |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/designMasses |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/reference\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Inputs/SFCclean[@mapType='vector'] |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Outputs/SFCnew[@mapType='vector'] |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Inputs/MainPhasesDuration[@mapType='vector'] |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Inputs/NumberEngines |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Inputs/AltitudeCruise |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Outputs |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/designMasses |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/reference\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "2a272229-5cfe-4a1e-bea8-7c74cbb01d8a", "name": "XML", "datatype": "FileReference"}, {"identifier": "ac7f755c-2c74-4bfd-91c8-4e563616cb76", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "213d97a8-e29d-4a8a-9781-975272d5e56c", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "cca4f52f-3117-43e6-a00b-253135fe3072", "name": "HybridSystemBlock_output_filter", "location": "885:790", "zIndex": "17", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/toolspecific/HybridTool\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/toolspecific/HybridTool\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "947e71ef-6c4b-4a72-8b6a-49bf29dd84d0", "name": "XML", "datatype": "FileReference"}, {"identifier": "f39729e7-3494-42d8-9e5b-539815585b8a", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "1c5885b9-d690-423b-85e9-439cac8a32dd", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "177253c1-208a-4568-9e45-ee77ad0e9e02", "name": "HybridSystemBlock_splitter", "location": "865:715", "zIndex": "18", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "fa6b5714-5b4c-463f-8a0f-7a41f8ea0d98", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "4d3ef870-5ad9-46a9-b522-b76b147b3656", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "f5cd6122-c8c2-41ad-b0b4-6126ea3aa669", "name": "HybridSystemBlock_output_complement_filter", "location": "920:715", "zIndex": "19", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific/ASTRID |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel |\n\t\t\t/cpacs/toolspecific/technologies |\n\t\t\t/cpacs/vehicles\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific/ASTRID |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel |\n\t\t\t/cpacs/toolspecific/technologies |\n\t\t\t/cpacs/vehicles\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "2c9d5808-db19-4144-8eda-58f6d911be5d", "name": "XML", "datatype": "FileReference"}, {"identifier": "2f5fd924-6cef-4917-bf6f-ce6edf26b0de", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "47bf3451-fe0c-4137-85ec-1264b683b825", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "3aa00c1f-594b-454e-be09-cb3629b63fe6", "name": "HybridSystemBlock_merge_script", "location": "900:865", "zIndex": "20", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "f8f0d83f-af8b-458e-becb-0dd888f33331", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "4f85709e-3f8e-4836-b4a9-b55aa2a994de", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "84a8ac55-5e36-4685-bd4e-f5636569f003", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "45022792-a72d-45f9-ad89-25c70bd2503d", "name": "EngineBlock_input_filter", "location": "1110:995", "zIndex": "21", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/toolspecific/ASTRID |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Inputs |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Outputs |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/analysis/bpr00\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/toolspecific/ASTRID |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Inputs |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Outputs |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/analysis/bpr00\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "d7e42391-c78f-4f1d-844e-4916a122078c", "name": "XML", "datatype": "FileReference"}, {"identifier": "2f324c07-3c17-464a-a5a9-848b1d572aca", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "c3195c48-5e3d-474b-a430-2a7c5fbf80da", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "b4bcc6a4-1716-4d1c-908d-95cb5a113f0a", "name": "EngineBlock_output_filter", "location": "1185:1070", "zIndex": "22", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Outputs |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/geometry\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Outputs |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/geometry\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "afd5d4b5-1c50-445c-a831-e6399f7c0898", "name": "XML", "datatype": "FileReference"}, {"identifier": "b54f09f1-3578-46de-bc9b-6d629f1a9af2", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "d39654e5-a1f1-4566-b0b4-5ce3ffde065e", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "027ed324-8ad3-46a0-9b86-be71100a0f42", "name": "EngineBlock_splitter", "location": "1165:995", "zIndex": "23", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "e565e77d-772a-42f0-b7e0-83aa050bc46d", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "64705f6b-c831-4e07-9369-f121196ccc5f", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "f6a6b15c-8101-4823-b33d-d037d5a1fe26", "name": "EngineBlock_output_complement_filter", "location": "1220:995", "zIndex": "24", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific/ASTRID |\n\t\t\t/cpacs/toolspecific/HybridTool |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Inputs |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel |\n\t\t\t/cpacs/toolspecific/technologies |\n\t\t\t/cpacs/vehicles/aircraft |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/analysis\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific/ASTRID |\n\t\t\t/cpacs/toolspecific/HybridTool |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Inputs |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel |\n\t\t\t/cpacs/toolspecific/technologies |\n\t\t\t/cpacs/vehicles/aircraft |\n\t\t\t/cpacs/vehicles/engines/engine[@uID='engine']/analysis\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "d08cdea1-f6b3-4d0f-b7ed-6ee574161a31", "name": "XML", "datatype": "FileReference"}, {"identifier": "5458b546-7c52-478b-8535-b3fe87e674cd", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "39b705f0-b84b-4fce-99ea-d36e577112de", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "02d09b1e-c032-492f-b6fe-e40ac059affb", "name": "EngineBlock_merge_script", "location": "1200:1145", "zIndex": "25", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "4bdbc639-dc97-47b6-8c0c-eb51022883b6", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "0b644d05-01d8-4485-9120-9f5eb2d62e91", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "94b60e9b-86f9-4185-ae90-42f839eb64aa", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "936dba3a-8518-4c71-bfcf-a54ea1bfa7ff", "name": "MassesBlock_input_filter", "location": "1410:1275", "zIndex": "26", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific/HybridTool/Outputs/mHybridSystem |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Outputs/EngineDryMass |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Outputs/FuelReserves |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Outputs/MissionFuel |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mFurnishing |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mStructure |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mSystems |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mOperatorItems |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/massDescription |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/payload\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific/HybridTool/Outputs/mHybridSystem |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Outputs/EngineDryMass |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Outputs/FuelReserves |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Outputs/MissionFuel |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mFurnishing |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mStructure |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mSystems |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mOperatorItems |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/massDescription |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/payload\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "7bf4262f-0f03-4f3b-8687-850639a5aa7e", "name": "XML", "datatype": "FileReference"}, {"identifier": "8c92c033-1863-4fe5-a667-360a7b731403", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "749d0dfe-af33-4056-b21b-9c23d19a6c99", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "d5299120-6652-4c08-89a9-c58a19108bd6", "name": "MassesBlock_output_filter", "location": "1485:1350", "zIndex": "27", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/designMasses |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/massDescription |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/massDescription\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/designMasses |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/massDescription |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/massDescription\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "1bba8798-9078-47b6-95ca-840cad7d04bb", "name": "XML", "datatype": "FileReference"}, {"identifier": "2896d0c7-a13e-44f5-a899-1a4c8045f0dc", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "ae19f3d5-5c3d-40a5-978e-12303939e0c4", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "8b66797a-3e23-4058-8d14-c02562d2e1b3", "name": "MassesBlock_splitter", "location": "1465:1275", "zIndex": "28", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "e94a22dd-ce82-4dbc-9794-60340445e484", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "d7d3686c-1534-451b-9361-e4b9b039a575", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "c4e86b5e-c150-421a-8ef1-bf0c28ffa100", "name": "MassesBlock_output_complement_filter", "location": "1520:1275", "zIndex": "29", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/aeroPerformanceMap |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mFurnishing |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mStructure |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mSystems |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mOperatorItems |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/payload |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/reference |\n\t\t\t/cpacs/vehicles/engines\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/aeroPerformanceMap |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mFurnishing |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mStructure |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mEM/mSystems |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/mOEM/mOperatorItems |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/analyses/massBreakdown/payload |\n\t\t\t/cpacs/vehicles/aircraft/model[@uID='model']/reference |\n\t\t\t/cpacs/vehicles/engines\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "831ef109-eb37-485d-ad50-64681f70c442", "name": "XML", "datatype": "FileReference"}, {"identifier": "1238ae3b-7d5e-4d1f-bec0-2afb08ba7fc0", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "f9f9eacb-fc7f-45a7-a080-a77a2c9d1f59", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "cf109648-cdcc-4a96-920a-e2288a9a3699", "name": "MassesBlock_merge_script", "location": "1500:1425", "zIndex": "30", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "146b285a-e008-4a3c-a0a9-fbf9187b5e54", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "1c2e1551-e6a4-4253-8a43-c7e262485442", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "ef485664-b628-427f-8e81-47991e3828b9", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "a7efdc2c-f008-4697-8505-25768a21f09b", "name": "MassesBlock_concurrency_resolution_E03aEBFc", "location": "1445:1145", "zIndex": "31", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "f53407b6-e94e-46b2-a613-2d55e6876ec9", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "9a9f5b55-866d-413a-b622-58fbf0560b50", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "6348b656-4cbf-43a2-b0c0-cf22370218e8", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "e8d8cc1c-b9ac-452f-895a-f91a320b3041", "name": "MassesBlock_concurrency_resolution_E03aEBFc_merger", "location": "1465:1090", "zIndex": "32", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/toolspecific/HybridTool/Outputs/ICEpower |\n\t\t\t/cpacs/toolspecific/HybridTool/Outputs/mHybridSystem\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/toolspecific/HybridTool/Outputs/ICEpower |\n\t\t\t/cpacs/toolspecific/HybridTool/Outputs/mHybridSystem\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "cddd27a3-5988-4511-a07c-d54bc2058a20", "name": "XML", "datatype": "FileReference"}, {"identifier": "2a28bc81-6edb-46e6-a4b7-304e765a4007", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "0a8f70b1-6268-4569-969a-2d07ae522311", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "e7820273-9510-4b90-af26-0092205f4ece", "name": "MissionBlock_input_filter", "location": "1710:1555", "zIndex": "33", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Outputs/SFCnew[@mapType='vector'] |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Inputs |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Outputs\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel/Outputs/SFCnew[@mapType='vector'] |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Inputs |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel/Outputs\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "b611e97c-621c-45de-a44f-0adf62d2de94", "name": "XML", "datatype": "FileReference"}, {"identifier": "831a402c-7656-4c05-b701-977717b1cd6c", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "e7735855-e0ab-45aa-a2e1-5ceabb7bd07f", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "981e2216-b800-4b27-9933-526d07da13a7", "name": "MissionBlock_output_filter", "location": "1785:1630", "zIndex": "34", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Outputs\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Outputs\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "c40e8206-76ce-4313-9028-b59800a50db1", "name": "XML", "datatype": "FileReference"}, {"identifier": "579c693a-e63c-450f-b760-0244ff2154e4", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "7bc0d353-d38a-45c0-afa6-d7a259527839", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "7a4294c2-1054-491c-89fa-3b82ce67f929", "name": "MissionBlock_splitter", "location": "1765:1555", "zIndex": "35", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "4af64d80-523f-46ca-9950-ce35fb229466", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "5e030790-9b04-45c5-81a5-e7b7197fffbd", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "bbbada36-d8fc-4ad5-b7d6-7523714deedc", "name": "MissionBlock_output_complement_filter", "location": "1820:1555", "zIndex": "36", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific/ASTRID |\n\t\t\t/cpacs/toolspecific/HybridTool |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Inputs |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel |\n\t\t\t/cpacs/toolspecific/technologies |\n\t\t\t/cpacs/vehicles\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/cpacs/header |\n\t\t\t/cpacs/toolspecific/ASTRID |\n\t\t\t/cpacs/toolspecific/HybridTool |\n\t\t\t/cpacs/toolspecific/SimplifiedEngineModel |\n\t\t\t/cpacs/toolspecific/SimplifiedMissionModel/Inputs |\n\t\t\t/cpacs/toolspecific/SimplifiedPerformanceModel |\n\t\t\t/cpacs/toolspecific/technologies |\n\t\t\t/cpacs/vehicles\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "a8a17934-c1f8-4779-b5da-754273fce601", "name": "XML", "datatype": "FileReference"}, {"identifier": "9ec73623-e76c-4f6b-b266-6aea04e58237", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "2b8696d1-5789-4364-91be-fc6272ddd8eb", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "fb479af9-24c9-4b34-93e8-1c72a00bb238", "name": "MissionBlock_merge_script", "location": "1800:1705", "zIndex": "37", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "bc452d35-a837-4829-b3b0-e90d06c8e810", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "ffbcfbaf-286c-4d1c-a2f9-db26b3c6a08f", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "213a215b-1ec5-4118-b5f2-35966bd5e4be", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "5464dd9d-5ab5-40e5-8a9c-32a1c232f30e", "name": "Input_Provider", "location": "150:100", "zIndex": "38", "active": "true", "component": {"identifier": "de.rcenvironment.inputprovider", "version": "3.2", "name": "Input Provider"}, "configuration": {"storeComponentHistoryData": "true"}, "dynamicOutputs": [{"identifier": "186b60b9-2046-4297-839e-afbfe91262ab", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"fileSourceType": "atWorkflowStart", "startValue": ""}}]}, {"identifier": "b1bb39ca-d888-4eaa-b494-33ca92229721", "name": "MDA_Output_Writer", "location": "1950:290", "zIndex": "39", "active": "true", "component": {"identifier": "de.rcenvironment.outputwriter", "version": "2.0", "name": "Output Writer"}, "configuration": {"OWWritePath": "${targetRootFolder}", "SelectRootOnWorkflowStart": "true", "SelectedRoot": "", "storeComponentHistoryData": "true"}, "dynamicInputs": [{"identifier": "841929d0-35e0-4fd5-83ec-c3819c3d9201", "name": "XML", "epIdentifier": "default", "group": "write", "datatype": "FileReference", "metadata": {"filename": "[Timestamp at workflow start]__[Workflow name]__[Execution count].xml", "folderForSaving": "[root]"}}], "dynamicInputGroups": [{"identifier": "189d7d2a-6129-4ef7-99e5-d0972adb874d", "name": "189d7d2a-6129-4ef7-99e5-d0972adb874d", "epIdentifier": "dynamicAndGroup"}]}], "connections": [{"source": "4d2ec392-a3b7-4d7d-86b3-29331f7c79b6", "output": "a8cf7336-0ec3-4eda-871c-6d7f5c45f34e", "target": "59fee4a8-1721-4ee8-906e-7556602fafd7", "input": "090590f7-5e63-4574-8ee5-53b4c14add3f"}, {"source": "4d2ec392-a3b7-4d7d-86b3-29331f7c79b6", "output": "3c19c0ee-1d90-435b-8c27-410f4df90620", "target": "59fee4a8-1721-4ee8-906e-7556602fafd7", "input": "ff86c296-66fe-4531-9b8d-717bf1d9c744"}, {"source": "4d2ec392-a3b7-4d7d-86b3-29331f7c79b6", "output": "4f53ba7e-1115-4f1a-9e57-04f0d768769e", "target": "59fee4a8-1721-4ee8-906e-7556602fafd7", "input": "24f595d0-56f7-45a4-bc85-d65a6bebf3f5"}, {"source": "eaf99b37-f137-4b95-a183-0e02e1f4e7af", "output": "5b753822-9931-4c43-9592-faec66ce16b8", "target": "59fee4a8-1721-4ee8-906e-7556602fafd7", "input": "1487a2e6-9d4e-4f47-97fb-07099dd4e6ca"}, {"source": "eaf99b37-f137-4b95-a183-0e02e1f4e7af", "output": "397fdf90-2ecf-415a-b785-fc8c85b82fc0", "target": "59fee4a8-1721-4ee8-906e-7556602fafd7", "input": "a73bc4d3-3b8d-43f8-b1c6-c3e135cb5ce1"}, {"source": "eaf99b37-f137-4b95-a183-0e02e1f4e7af", "output": "f188c79d-bd1c-4df7-a2fb-69ac6fa4064e", "target": "59fee4a8-1721-4ee8-906e-7556602fafd7", "input": "8902a81b-669b-4d75-bca4-b84295a24ff2"}, {"source": "10adea1e-2689-40d2-a1c7-94766bd6b2cc", "output": "c01daeaa-bd3d-478f-926f-163266148c57", "target": "fc7455dc-3e7a-49f3-8e63-f5c8cda972d1", "input": "3c1a4f51-8db1-4d08-b48b-617d19caec95"}, {"source": "fb479af9-24c9-4b34-93e8-1c72a00bb238", "output": "213a215b-1ec5-4118-b5f2-35966bd5e4be", "target": "fc7455dc-3e7a-49f3-8e63-f5c8cda972d1", "input": "8bba7f0e-bf88-478c-be67-7b24cbbb42c1"}, {"source": "cf109648-cdcc-4a96-920a-e2288a9a3699", "output": "ef485664-b628-427f-8e81-47991e3828b9", "target": "10adea1e-2689-40d2-a1c7-94766bd6b2cc", "input": "ef27d6ed-ad6b-4ef7-8a96-547e369d78e7"}, {"source": "cf109648-cdcc-4a96-920a-e2288a9a3699", "output": "ef485664-b628-427f-8e81-47991e3828b9", "target": "10adea1e-2689-40d2-a1c7-94766bd6b2cc", "input": "b1f88c99-77a8-4d99-a579-52b521892126"}, {"source": "fc7455dc-3e7a-49f3-8e63-f5c8cda972d1", "output": "d083340c-e4dc-4fd7-ba8a-0c5058dca3c9", "target": "eaf99b37-f137-4b95-a183-0e02e1f4e7af", "input": "9e774ede-7187-461c-9561-2c132175ec3a"}, {"source": "9d64ddd8-1c1e-4792-b833-422497561574", "output": "c6a5e620-b0ee-4f76-ae79-214307c9a289", "target": "3f3b8362-adc5-4101-ab30-372ea8eb8d72", "input": "9ffa8a38-95a9-49b0-a855-03c15931fdac"}, {"source": "9d64ddd8-1c1e-4792-b833-422497561574", "output": "c6a5e620-b0ee-4f76-ae79-214307c9a289", "target": "3f3b8362-adc5-4101-ab30-372ea8eb8d72", "input": "375b69bf-416b-443c-90bf-a1efc9a74369"}, {"source": "3f3b8362-adc5-4101-ab30-372ea8eb8d72", "output": "c8eec761-71b6-4faa-ba1c-7bbfb49fb0e1", "target": "b0cd3201-caf3-4d11-95da-f379e09c3cf7", "input": "0fe475dc-0c20-43df-8b78-78aeb10642c9"}, {"source": "9d64ddd8-1c1e-4792-b833-422497561574", "output": "c6a5e620-b0ee-4f76-ae79-214307c9a289", "target": "163d3136-0478-48b6-be75-6824ef2daac9", "input": "e653a40f-97d2-4662-b29a-6964590eb330"}, {"source": "9d64ddd8-1c1e-4792-b833-422497561574", "output": "c6a5e620-b0ee-4f76-ae79-214307c9a289", "target": "163d3136-0478-48b6-be75-6824ef2daac9", "input": "87e519cc-95fc-4947-b861-d44eaa9dce3a"}, {"source": "163d3136-0478-48b6-be75-6824ef2daac9", "output": "35e8afba-7a89-4935-8562-a657b889454f", "target": "2bfa2bba-07e8-4d18-98c6-8f829d881fd9", "input": "8f159144-42f6-4d37-8b64-6c7fd9225b75"}, {"source": "b0cd3201-caf3-4d11-95da-f379e09c3cf7", "output": "40fd11a4-a0f6-4eca-ac1e-b65aefc3f9dd", "target": "a780ebb5-a430-4ac4-a7e0-fd0fa792d14f", "input": "fe41f566-62b0-478f-a183-30a0822c4bea"}, {"source": "b0cd3201-caf3-4d11-95da-f379e09c3cf7", "output": "40fd11a4-a0f6-4eca-ac1e-b65aefc3f9dd", "target": "a780ebb5-a430-4ac4-a7e0-fd0fa792d14f", "input": "a4169f89-e748-44ad-a7b4-6f5673414752"}, {"source": "a780ebb5-a430-4ac4-a7e0-fd0fa792d14f", "output": "6ab693ad-eebd-4d62-bd9a-a50e36aa2771", "target": "2bfa2bba-07e8-4d18-98c6-8f829d881fd9", "input": "3ff9d686-a99d-4969-997d-b4e8d2542cce"}, {"source": "59fee4a8-1721-4ee8-906e-7556602fafd7", "output": "a37bfa15-65e9-4cd5-a2cd-a819641675e3", "target": "9d64ddd8-1c1e-4792-b833-422497561574", "input": "8f3597b8-b4a0-4b6f-b18c-ccb6846d1028"}, {"source": "177253c1-208a-4568-9e45-ee77ad0e9e02", "output": "4d3ef870-5ad9-46a9-b522-b76b147b3656", "target": "4359f9a3-0914-4369-a872-29e893d76b6c", "input": "2a272229-5cfe-4a1e-bea8-7c74cbb01d8a"}, {"source": "177253c1-208a-4568-9e45-ee77ad0e9e02", "output": "4d3ef870-5ad9-46a9-b522-b76b147b3656", "target": "4359f9a3-0914-4369-a872-29e893d76b6c", "input": "ac7f755c-2c74-4bfd-91c8-4e563616cb76"}, {"source": "4359f9a3-0914-4369-a872-29e893d76b6c", "output": "213d97a8-e29d-4a8a-9781-975272d5e56c", "target": "02f9fda8-5486-41d9-8176-df630b2dcee4", "input": "4e00b911-5def-48f0-830e-99b073936df5"}, {"source": "177253c1-208a-4568-9e45-ee77ad0e9e02", "output": "4d3ef870-5ad9-46a9-b522-b76b147b3656", "target": "f5cd6122-c8c2-41ad-b0b4-6126ea3aa669", "input": "2c9d5808-db19-4144-8eda-58f6d911be5d"}, {"source": "177253c1-208a-4568-9e45-ee77ad0e9e02", "output": "4d3ef870-5ad9-46a9-b522-b76b147b3656", "target": "f5cd6122-c8c2-41ad-b0b4-6126ea3aa669", "input": "2f5fd924-6cef-4917-bf6f-ce6edf26b0de"}, {"source": "f5cd6122-c8c2-41ad-b0b4-6126ea3aa669", "output": "47bf3451-fe0c-4137-85ec-1264b683b825", "target": "3aa00c1f-594b-454e-be09-cb3629b63fe6", "input": "f8f0d83f-af8b-458e-becb-0dd888f33331"}, {"source": "02f9fda8-5486-41d9-8176-df630b2dcee4", "output": "e32b9dff-b2fc-4348-bc6f-13801b6e28ff", "target": "cca4f52f-3117-43e6-a00b-253135fe3072", "input": "947e71ef-6c4b-4a72-8b6a-49bf29dd84d0"}, {"source": "02f9fda8-5486-41d9-8176-df630b2dcee4", "output": "e32b9dff-b2fc-4348-bc6f-13801b6e28ff", "target": "cca4f52f-3117-43e6-a00b-253135fe3072", "input": "f39729e7-3494-42d8-9e5b-539815585b8a"}, {"source": "cca4f52f-3117-43e6-a00b-253135fe3072", "output": "1c5885b9-d690-423b-85e9-439cac8a32dd", "target": "3aa00c1f-594b-454e-be09-cb3629b63fe6", "input": "4f85709e-3f8e-4836-b4a9-b55aa2a994de"}, {"source": "2bfa2bba-07e8-4d18-98c6-8f829d881fd9", "output": "7545fe46-e2d4-4522-8d42-71748188bb11", "target": "177253c1-208a-4568-9e45-ee77ad0e9e02", "input": "fa6b5714-5b4c-463f-8a0f-7a41f8ea0d98"}, {"source": "027ed324-8ad3-46a0-9b86-be71100a0f42", "output": "64705f6b-c831-4e07-9369-f121196ccc5f", "target": "45022792-a72d-45f9-ad89-25c70bd2503d", "input": "d7e42391-c78f-4f1d-844e-4916a122078c"}, {"source": "027ed324-8ad3-46a0-9b86-be71100a0f42", "output": "64705f6b-c831-4e07-9369-f121196ccc5f", "target": "45022792-a72d-45f9-ad89-25c70bd2503d", "input": "2f324c07-3c17-464a-a5a9-848b1d572aca"}, {"source": "45022792-a72d-45f9-ad89-25c70bd2503d", "output": "c3195c48-5e3d-474b-a430-2a7c5fbf80da", "target": "907d1a1a-2721-4637-ba46-0761682bdac8", "input": "f3e7a3a2-862d-417a-a780-66d922ef402e"}, {"source": "027ed324-8ad3-46a0-9b86-be71100a0f42", "output": "64705f6b-c831-4e07-9369-f121196ccc5f", "target": "f6a6b15c-8101-4823-b33d-d037d5a1fe26", "input": "d08cdea1-f6b3-4d0f-b7ed-6ee574161a31"}, {"source": "027ed324-8ad3-46a0-9b86-be71100a0f42", "output": "64705f6b-c831-4e07-9369-f121196ccc5f", "target": "f6a6b15c-8101-4823-b33d-d037d5a1fe26", "input": "5458b546-7c52-478b-8535-b3fe87e674cd"}, {"source": "f6a6b15c-8101-4823-b33d-d037d5a1fe26", "output": "39b705f0-b84b-4fce-99ea-d36e577112de", "target": "02d09b1e-c032-492f-b6fe-e40ac059affb", "input": "4bdbc639-dc97-47b6-8c0c-eb51022883b6"}, {"source": "907d1a1a-2721-4637-ba46-0761682bdac8", "output": "c03ee5be-d6da-4d0b-9d13-7b9e81764db1", "target": "b4bcc6a4-1716-4d1c-908d-95cb5a113f0a", "input": "afd5d4b5-1c50-445c-a831-e6399f7c0898"}, {"source": "907d1a1a-2721-4637-ba46-0761682bdac8", "output": "c03ee5be-d6da-4d0b-9d13-7b9e81764db1", "target": "b4bcc6a4-1716-4d1c-908d-95cb5a113f0a", "input": "b54f09f1-3578-46de-bc9b-6d629f1a9af2"}, {"source": "b4bcc6a4-1716-4d1c-908d-95cb5a113f0a", "output": "d39654e5-a1f1-4566-b0b4-5ce3ffde065e", "target": "02d09b1e-c032-492f-b6fe-e40ac059affb", "input": "0b644d05-01d8-4485-9120-9f5eb2d62e91"}, {"source": "2bfa2bba-07e8-4d18-98c6-8f829d881fd9", "output": "7545fe46-e2d4-4522-8d42-71748188bb11", "target": "027ed324-8ad3-46a0-9b86-be71100a0f42", "input": "e565e77d-772a-42f0-b7e0-83aa050bc46d"}, {"source": "8b66797a-3e23-4058-8d14-c02562d2e1b3", "output": "d7d3686c-1534-451b-9361-e4b9b039a575", "target": "936dba3a-8518-4c71-bfcf-a54ea1bfa7ff", "input": "7bf4262f-0f03-4f3b-8687-850639a5aa7e"}, {"source": "8b66797a-3e23-4058-8d14-c02562d2e1b3", "output": "d7d3686c-1534-451b-9361-e4b9b039a575", "target": "936dba3a-8518-4c71-bfcf-a54ea1bfa7ff", "input": "8c92c033-1863-4fe5-a667-360a7b731403"}, {"source": "936dba3a-8518-4c71-bfcf-a54ea1bfa7ff", "output": "749d0dfe-af33-4056-b21b-9c23d19a6c99", "target": "52cc45a3-bcab-43b3-b8be-1cc561d67f03", "input": "a15feb95-54ea-4aa9-ba14-8277adddb7dc"}, {"source": "8b66797a-3e23-4058-8d14-c02562d2e1b3", "output": "d7d3686c-1534-451b-9361-e4b9b039a575", "target": "c4e86b5e-c150-421a-8ef1-bf0c28ffa100", "input": "831ef109-eb37-485d-ad50-64681f70c442"}, {"source": "8b66797a-3e23-4058-8d14-c02562d2e1b3", "output": "d7d3686c-1534-451b-9361-e4b9b039a575", "target": "c4e86b5e-c150-421a-8ef1-bf0c28ffa100", "input": "1238ae3b-7d5e-4d1f-bec0-2afb08ba7fc0"}, {"source": "c4e86b5e-c150-421a-8ef1-bf0c28ffa100", "output": "f9f9eacb-fc7f-45a7-a080-a77a2c9d1f59", "target": "cf109648-cdcc-4a96-920a-e2288a9a3699", "input": "146b285a-e008-4a3c-a0a9-fbf9187b5e54"}, {"source": "52cc45a3-bcab-43b3-b8be-1cc561d67f03", "output": "fa01edcb-625a-4593-b672-011bb5ad6435", "target": "d5299120-6652-4c08-89a9-c58a19108bd6", "input": "1bba8798-9078-47b6-95ca-840cad7d04bb"}, {"source": "52cc45a3-bcab-43b3-b8be-1cc561d67f03", "output": "fa01edcb-625a-4593-b672-011bb5ad6435", "target": "d5299120-6652-4c08-89a9-c58a19108bd6", "input": "2896d0c7-a13e-44f5-a899-1a4c8045f0dc"}, {"source": "d5299120-6652-4c08-89a9-c58a19108bd6", "output": "ae19f3d5-5c3d-40a5-978e-12303939e0c4", "target": "cf109648-cdcc-4a96-920a-e2288a9a3699", "input": "1c2e1551-e6a4-4253-8a43-c7e262485442"}, {"source": "e8d8cc1c-b9ac-452f-895a-f91a320b3041", "output": "0a8f70b1-6268-4569-969a-2d07ae522311", "target": "a7efdc2c-f008-4697-8505-25768a21f09b", "input": "9a9f5b55-866d-413a-b622-58fbf0560b50"}, {"source": "02d09b1e-c032-492f-b6fe-e40ac059affb", "output": "94b60e9b-86f9-4185-ae90-42f839eb64aa", "target": "a7efdc2c-f008-4697-8505-25768a21f09b", "input": "f53407b6-e94e-46b2-a613-2d55e6876ec9"}, {"source": "3aa00c1f-594b-454e-be09-cb3629b63fe6", "output": "84a8ac55-5e36-4685-bd4e-f5636569f003", "target": "e8d8cc1c-b9ac-452f-895a-f91a320b3041", "input": "cddd27a3-5988-4511-a07c-d54bc2058a20"}, {"source": "3aa00c1f-594b-454e-be09-cb3629b63fe6", "output": "84a8ac55-5e36-4685-bd4e-f5636569f003", "target": "e8d8cc1c-b9ac-452f-895a-f91a320b3041", "input": "2a28bc81-6edb-46e6-a4b7-304e765a4007"}, {"source": "a7efdc2c-f008-4697-8505-25768a21f09b", "output": "6348b656-4cbf-43a2-b0c0-cf22370218e8", "target": "8b66797a-3e23-4058-8d14-c02562d2e1b3", "input": "e94a22dd-ce82-4dbc-9794-60340445e484"}, {"source": "7a4294c2-1054-491c-89fa-3b82ce67f929", "output": "5e030790-9b04-45c5-81a5-e7b7197fffbd", "target": "e7820273-9510-4b90-af26-0092205f4ece", "input": "b611e97c-621c-45de-a44f-0adf62d2de94"}, {"source": "7a4294c2-1054-491c-89fa-3b82ce67f929", "output": "5e030790-9b04-45c5-81a5-e7b7197fffbd", "target": "e7820273-9510-4b90-af26-0092205f4ece", "input": "831a402c-7656-4c05-b701-977717b1cd6c"}, {"source": "e7820273-9510-4b90-af26-0092205f4ece", "output": "e7735855-e0ab-45aa-a2e1-5ceabb7bd07f", "target": "043bcfda-a0a8-4ad7-b8c9-db33178d8fa5", "input": "d75bb3e9-5453-4a00-ab65-dd02ce1032c7"}, {"source": "7a4294c2-1054-491c-89fa-3b82ce67f929", "output": "5e030790-9b04-45c5-81a5-e7b7197fffbd", "target": "bbbada36-d8fc-4ad5-b7d6-7523714deedc", "input": "a8a17934-c1f8-4779-b5da-754273fce601"}, {"source": "7a4294c2-1054-491c-89fa-3b82ce67f929", "output": "5e030790-9b04-45c5-81a5-e7b7197fffbd", "target": "bbbada36-d8fc-4ad5-b7d6-7523714deedc", "input": "9ec73623-e76c-4f6b-b266-6aea04e58237"}, {"source": "bbbada36-d8fc-4ad5-b7d6-7523714deedc", "output": "2b8696d1-5789-4364-91be-fc6272ddd8eb", "target": "fb479af9-24c9-4b34-93e8-1c72a00bb238", "input": "bc452d35-a837-4829-b3b0-e90d06c8e810"}, {"source": "043bcfda-a0a8-4ad7-b8c9-db33178d8fa5", "output": "dd653793-e613-4e3b-9b1b-572793c46209", "target": "981e2216-b800-4b27-9933-526d07da13a7", "input": "c40e8206-76ce-4313-9028-b59800a50db1"}, {"source": "043bcfda-a0a8-4ad7-b8c9-db33178d8fa5", "output": "dd653793-e613-4e3b-9b1b-572793c46209", "target": "981e2216-b800-4b27-9933-526d07da13a7", "input": "579c693a-e63c-450f-b760-0244ff2154e4"}, {"source": "981e2216-b800-4b27-9933-526d07da13a7", "output": "7bc0d353-d38a-45c0-afa6-d7a259527839", "target": "fb479af9-24c9-4b34-93e8-1c72a00bb238", "input": "ffbcfbaf-286c-4d1c-a2f9-db26b3c6a08f"}, {"source": "02d09b1e-c032-492f-b6fe-e40ac059affb", "output": "94b60e9b-86f9-4185-ae90-42f839eb64aa", "target": "7a4294c2-1054-491c-89fa-3b82ce67f929", "input": "4af64d80-523f-46ca-9950-ce35fb229466"}, {"source": "5464dd9d-5ab5-40e5-8a9c-32a1c232f30e", "output": "186b60b9-2046-4297-839e-afbfe91262ab", "target": "4d2ec392-a3b7-4d7d-86b3-29331f7c79b6", "input": "8432b7e5-0c23-473d-9811-9307f0931231"}, {"source": "59fee4a8-1721-4ee8-906e-7556602fafd7", "output": "190419f5-9853-49ed-adae-f74992a0a69b", "target": "b1bb39ca-d888-4eaa-b494-33ca92229721", "input": "841929d0-35e0-4fd5-83ec-c3819c3d9201"}], "bendpoints": "[{\"source\": \"fb479af9-24c9-4b34-93e8-1c72a00bb238\", \"target\": \"fc7455dc-3e7a-49f3-8e63-f5c8cda972d1\", \"coordinates\": \"310:1745\"}, {\"source\": \"a780ebb5-a430-4ac4-a7e0-fd0fa792d14f\", \"target\": \"2bfa2bba-07e8-4d18-98c6-8f829d881fd9\", \"coordinates\": \"640:530\"}, {\"source\": \"59fee4a8-1721-4ee8-906e-7556602fafd7\", \"target\": \"9d64ddd8-1c1e-4792-b833-422497561574\", \"coordinates\": \"585:310\"}, {\"source\": \"cca4f52f-3117-43e6-a00b-253135fe3072\", \"target\": \"3aa00c1f-594b-454e-be09-cb3629b63fe6\", \"coordinates\": \"940:810\"}, {\"source\": \"2bfa2bba-07e8-4d18-98c6-8f829d881fd9\", \"target\": \"177253c1-208a-4568-9e45-ee77ad0e9e02\", \"coordinates\": \"885:625\"}, {\"source\": \"b4bcc6a4-1716-4d1c-908d-95cb5a113f0a\", \"target\": \"02d09b1e-c032-492f-b6fe-e40ac059affb\", \"coordinates\": \"1240:1090\"}, {\"source\": \"2bfa2bba-07e8-4d18-98c6-8f829d881fd9\", \"target\": \"027ed324-8ad3-46a0-9b86-be71100a0f42\", \"coordinates\": \"1185:625\"}, {\"source\": \"d5299120-6652-4c08-89a9-c58a19108bd6\", \"target\": \"cf109648-cdcc-4a96-920a-e2288a9a3699\", \"coordinates\": \"1540:1370\"}, {\"source\": \"3aa00c1f-594b-454e-be09-cb3629b63fe6\", \"target\": \"e8d8cc1c-b9ac-452f-895a-f91a320b3041\", \"coordinates\": \"1485:905\"}, {\"source\": \"981e2216-b800-4b27-9933-526d07da13a7\", \"target\": \"fb479af9-24c9-4b34-93e8-1c72a00bb238\", \"coordinates\": \"1840:1650\"}, {\"source\": \"02d09b1e-c032-492f-b6fe-e40ac059affb\", \"target\": \"7a4294c2-1054-491c-89fa-3b82ce67f929\", \"coordinates\": \"1785:1185\"}, {\"source\": \"5464dd9d-5ab5-40e5-8a9c-32a1c232f30e\", \"target\": \"4d2ec392-a3b7-4d7d-86b3-29331f7c79b6\", \"coordinates\": \"310:120\"}]", "labels": "[{\"identifier\": \"2545fa21-d848-4c3e-a8e6-f907be5cb49d\", \"headerText\": \"\", \"text\": \"Converger Loop\", \"location\": \"200:200\", \"size\": \"1720:1620\", \"alpha\": \"180\", \"colorHeader\": \"0:0:0\", \"colorText\": \"0:0:0\", \"colorBackground\": \"0:255:255\", \"labelPosition\": \"TOPRIGHT\", \"textAlignmentType\": \"LEFT\", \"headerAlignmentType\": \"CENTER\", \"border\": \"false\", \"headerSize\": \"14\", \"textSize\": \"10\", \"zIndex\": 0}]"}